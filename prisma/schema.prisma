generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  bills            Bill[]
  billsParticipant BillParticipant[]
  itemsSplit       ItemSplit[]
}

model Bill {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    Category @default(etc)
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user         User?             @relation(fields: [userId], references: [id])
  userId       Int?
  participants BillParticipant[]
  items        BillItem[]
}

enum Category {
  traveling
  dining
  shopping
  hangout
  etc
}

model BillParticipant {
  id        Int     @id @default(autoincrement())
  name      String // For non-registered users
  userId    Int? // Optional - for registered users
  billId    Int
  isCreator Boolean @default(false)

  // Relationships
  user       User?       @relation(fields: [userId], references: [id])
  bill       Bill        @relation(fields: [billId], references: [id])
  itemsSplit ItemSplit[]
}

model BillItem {
  id             Int      @id @default(autoincrement())
  billId         Int
  name           String
  basePrice      Float
  taxPercent     Float    @default(0)
  taxAmount      Float    @default(0)
  servicePercent Float    @default(0)
  serviceAmount  Float    @default(0)
  totalAmount    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  bill   Bill        @relation(fields: [billId], references: [id])
  splits ItemSplit[]
}

model ItemSplit {
  id            Int      @id @default(autoincrement())
  shareAmount   Float
  paymentStatus Status   @default(pending)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user              User?            @relation(fields: [userId], references: [id])
  userId            Int?
  billParticipant   BillParticipant? @relation(fields: [billParticipantId], references: [id])
  billParticipantId Int?
  billItem          BillItem?        @relation(fields: [billItemId], references: [id])
  billItemId        Int?
}

enum Status {
  pending
  completed
}
